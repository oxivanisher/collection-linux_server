name: Auto Release and Publish to Ansible Galaxy

on:
  push:
    tags:
      - '*'

jobs:
  release_and_publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Update Submodules
      run: |
        git submodule update --init --recursive
      # Update submodules after initial checkout

    - name: Commit Updated Submodules
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update submodules"
        git push
      # Commit the submodule changes and push them to the repository

    - name: Check for Submodule Changes
      id: submodule_changes
      run: |
        # Check if there are changes in submodules
        if git diff --quiet --exit-code && git diff --quiet --exit-code --cached; then
          echo "No submodule changes detected."
          exit 0
        fi
        echo "Submodule changes detected."
      continue-on-error: true

    - name: Check for Version Change
      id: version_change
      run: |
        # Get the current version in galaxy.yml
        CURRENT_VERSION=$(grep -Eo 'version: [0-9]+\.[0-9]+\.[0-9]+' galaxy.yml | cut -d ' ' -f 2)

        # Get the previous version in galaxy.yml from the last commit
        PREVIOUS_VERSION=$(git log -1 --pretty=format:"%h" -- galaxy.yml~1)

        # Check if the versions are different
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version change detected."
        else
          echo "No version change detected."
          exit 0
        fi
      continue-on-error: true

    - name: Trigger Submodule Update
      if: steps.version_change.outcome == 'success'
      run: |
        # Trigger a submodule update to include the latest changes
        git submodule update --recursive --remote

    - name: Build Collection
      run: |
        ansible-galaxy collection build .
      working-directory: ${{ github.workspace }}

    - name: Publish Collection to Ansible Galaxy
      env:
        ANSIBLE_GALAXY_API_TOKEN: ${{ secrets.ANSIBLE_GALAXY_API_TOKEN }}
      run: |
        ansible-galaxy collection publish --token $ANSIBLE_GALAXY_API_TOKEN *.tar.gz
      working-directory: ${{ github.workspace }}
