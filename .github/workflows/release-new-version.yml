name: Auto Release on Version Change with Commit Messages

on:
  push:
    branches:
      - main  # Replace with your main branch name
  workflow_run:
    workflows: ["Check for Version Change"]
    types:
      - completed

jobs:
  check_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Check for Submodule Changes
        id: submodule_changes
        run: |
          # Check if there are changes in submodules
          if git diff --quiet --exit-code && git diff --quiet --exit-code --cached; then
            echo "No submodule changes detected."
            exit 0
          fi
          echo "Submodule changes detected."
        continue-on-error: true

      - name: Check for Version Change
        id: version_change
        run: |
          # Get the current version in galaxy.yml
          CURRENT_VERSION=$(grep -Eo 'version: [0-9]+\.[0-9]+\.[0-9]+' galaxy.yml | cut -d ' ' -f 2)

          # Get the previous version in galaxy.yml from the last commit
          PREVIOUS_VERSION=$(git show HEAD^:galaxy.yml | grep -Eo 'version: [0-9]+\.[0-9]+\.[0-9]+' | cut -d ' ' -f 2)

          # Check if the versions are different
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version change detected."
          else
            echo "No version change detected."
            exit 0
          fi
        continue-on-error: true

      - name: Trigger Submodule Update
        if: steps.version_change.outcome == 'success'
        run: |
          # Trigger a submodule update to include the latest changes
          git submodule update --recursive --remote

  create_release:
    needs: [check_version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository (again)
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get New Version
        id: get_new_version
        run: |
          # Extract the new version from galaxy.yml
          NEW_VERSION=$(grep -Eo 'version: [0-9]+\.[0-9]+\.[0-9]+' galaxy.yml | cut -d ' ' -f 2)
          echo "new_version=$NEW_VERSION" >> "$GITHUB_ENV"

      - name: Get Submodule Commit Messages
        if: steps.get_new_version.outputs.new_version != ''
        id: submodule_commit_messages
        run: |
          # Get the latest commit messages from all updated submodules
          SUBMODULE_COMMIT_MESSAGES=$(git submodule foreach --quiet 'git log -1 --pretty=format:"%s"')
          echo "submodule_commit_messages=$SUBMODULE_COMMIT_MESSAGES" >> "$GITHUB_ENV"

      - name: Create Release
        if: steps.get_new_version.outputs.new_version != ''
        run: |
          # Use the submodule commit messages as release notes
          RELEASE_NOTES="Release notes for version $NEW_VERSION:\n$SUBMODULE_COMMIT_MESSAGES"

          # Create a new release using the GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\":\"v${{ steps.get_new_version.outputs.new_version }}\",\"name\":\"Release v${{ steps.get_new_version.outputs.new_version }}\",\"body\":\"$RELEASE_NOTES\"}"
